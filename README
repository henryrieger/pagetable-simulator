To customize config.h, edit the #DEFINE for both LEVELS and POBITS. POBITS should likely be a multiple of 4 (to use hexadecimal values in a virtual address), and LEVELS should be relatively small, as the potentially expontenital increase in page tables could cause slow runtimes and too much unused memory. The LEVELS are the number of page table levels to be traversed and/or created to eventually create or view a page. More LEVELS means more memory available. POBITS is the page offset bits that determine where in that page data will be accessed. It is used in this program to establish page sizes as well.

An example use case of this code would be to manage memory more easily, in that accessing a small part of this large amount of data is relatively simple, requiring only one virtual address that can be associated with one piece of data. The data doesn't need to be continuous with other data needed, so they can be stored in various places. This also allows the memory system to control where to place things compared to manually. It can allocate more memory to a program than is previously physically available.

There are some bugs and limitations with this implementation. The deallocate function is not present and therefore data cannot be deallocated. It proved to be too difficult a task when I attemped to implement it, as my translate function is not functioning correctly,and I did not know how to remove such data without messing up other parts of the page table. Speaking of the translate function, it works partially, but fails in certain regards, such as after allocating a third page and beyond, and with pages sharing a last-level table. A potential implementation of the deallocate function would traverse the page table looking for the page, should it reach the last page-table level, and sees that a page exists, free() the memory for the page, and change the valid bit to 0 for that last page table entry it accessed. If it doesn't exist at any point, return as there is no need to deallocate. The main reason I could not implement was a fear of "destroying" past entries, which occured almost immediately when I tried to code it.
